ðŸ”„ Project Awareness & Context

Always read PLANNING.md at the start of a new conversation to understand the project's architecture, goals, style, and constraints for the Spencer Grey artist website.
Check TASK.md before starting a new task. If the task isn't listed, add it with a brief description and today's date.
Use consistent naming conventions, file structure, and architecture patterns as described in PLANNING.md, following Next.js App Router conventions.

ðŸ§± Code Structure & Modularity

Never create a file longer than 500 lines of code. If a file approaches this limit, refactor by splitting it into components, hooks, or utility files.
Organize code into clearly separated modules, grouped by feature or responsibility (e.g., auth, artwork, payment, admin).
Use clear, consistent imports (prefer absolute imports using tsconfig path aliases).

ðŸ§ª Testing & Reliability

Always create Jest/React Testing Library tests for new components and features.
After updating any logic, check whether existing unit tests need to be updated. If so, do it.
Tests should live in __tests__ folders adjacent to the components they test.

Include at least:

1 test for expected rendering/functionality
1 edge case (e.g., loading state, error state)
1 interaction test where appropriate





âœ… Task Completion

Mark completed tasks in TASK.md immediately after finishing them.
Add new sub-tasks or TODOs discovered during development to TASK.md under a "Discovered During Work" section.

ðŸ“Ž Style & Conventions

Use TypeScript as the primary language.
Follow consistent code style with ESLint and Prettier.
Use Zod for data validation.
Use Next.js App Router for routing, Supabase for backend, and Stripe for payments.
Write JSDoc comments for key functions:
typescript/**
 * Brief summary.
 * @param param1 - Description.
 * @returns Description.
 */
function example(param1: string): number {
   // implementation
}


ðŸ“š Documentation & Explainability

Update documentation when new features are added, dependencies change, or setup steps are modified.
Comment non-obvious code and ensure everything is understandable to a mid-level React/Next.js developer.
When implementing complex UI/UX patterns, add an inline // Reason: comment explaining the why, not just the what.

ðŸ§  AI Behavior Rules

Never assume missing context. Ask questions if uncertain about design decisions or technical requirements.
Never hallucinate libraries or functions â€“ only use known, verified npm packages listed in PLANNING.md.
Always confirm file paths and component names exist before referencing them in code.
Never delete or overwrite existing code unless explicitly instructed to or if part of a task from TASK.md.
Follow Tailwind best practices - use utility classes consistently and avoid custom CSS where possible.
Implement responsive designs following mobile-first approach.
Ensure accessibility in all UI components.